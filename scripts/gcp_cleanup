#!/usr/bin/env bash
set -euo pipefail

# GCP Cleanup Script for Buildkite PubSub Webhook

# Check if gcloud is installed
if ! command -v gcloud &> /dev/null; then
    echo "Error: gcloud CLI is not installed. Please install Google Cloud SDK first."
    exit 1
fi

# Default parameters
PROJECT_ID="${PROJECT_ID:-$(gcloud config get-value project)}"
REGION="${REGION:-us-central1}"
SERVICE_ACCOUNT_NAME="buildkite-webhook"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Dry run flag
DRY_RUN=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --project)
            PROJECT_ID="$2"
            shift 2
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        *)
            echo -e "${RED}Unknown argument: $1${NC}"
            exit 1
            ;;
    esac
done

# Validate project ID
if [ -z "$PROJECT_ID" ]; then
    echo -e "${RED}Error: Project ID not set. Use --project flag or set PROJECT_ID environment variable.${NC}"
    exit 1
fi

# Function to execute or print commands based on dry run flag
execute() {
    local cmd="$1"
    if [ "$DRY_RUN" = true ]; then
        echo -e "${YELLOW}[Dry Run] Would execute: $cmd${NC}"
    else
        echo -e "${GREEN}Executing: $cmd${NC}"
        eval "$cmd"
    fi
}

# Confirmation prompt
confirm() {
    if [ "$DRY_RUN" = true ]; then
        return 0
    fi
    
    read -p "Are you sure you want to proceed with cleanup for project $PROJECT_ID? (yes/no): " response
    case "$response" in
        [Yy]|[Yy][Ee][Ss])
            return 0
            ;;
        *)
            echo -e "${RED}Cleanup cancelled.${NC}"
            exit 1
            ;;
    esac
}

# Main cleanup function
cleanup() {
    echo -e "${GREEN}Starting cleanup for Buildkite PubSub Webhook resources in project: $PROJECT_ID${NC}"

    # Set the project
    execute "gcloud config set project $PROJECT_ID"

    # 1. Delete Pub/Sub topics
    echo -e "\n${YELLOW}Cleaning up Pub/Sub topics...${NC}"
    TOPICS=$(gcloud pubsub topics list --filter=name~'buildkite-' --format='value(name)')
    if [ -z "$TOPICS" ]; then
        echo -e "${GREEN}No Buildkite-related topics found.${NC}"
    else
        echo -e "${YELLOW}Found the following Buildkite-related topics:${NC}"
        echo "$TOPICS"
        
        # Capture topic deletion output for reporting
        DELETION_ERRORS=()
        for topic in $TOPICS; do
            echo -e "${YELLOW}Deleting topic: $topic${NC}"
            if ! output=$(execute "gcloud pubsub topics delete '$topic' --quiet 2>&1"); then
                echo -e "${RED}Failed to delete topic $topic:${NC}"
                echo "$output"
                DELETION_ERRORS+=("$topic")
            fi
        done

        # Report on any deletion errors
        if [ ${#DELETION_ERRORS[@]} -gt 0 ]; then
            echo -e "\n${RED}Failed to delete the following topics:${NC}"
            printf '%s\n' "${DELETION_ERRORS[@]}"
            exit 1
        fi
    fi

    # 2. Delete Pub/Sub subscriptions
    echo -e "\n${YELLOW}Cleaning up Pub/Sub subscriptions...${NC}"
    SUBSCRIPTIONS=$(gcloud pubsub subscriptions list --filter=name~'buildkite-' --format='value(name)')
    if [ -z "$SUBSCRIPTIONS" ]; then
        echo -e "${GREEN}No Buildkite-related subscriptions found.${NC}"
    else
        echo -e "${YELLOW}Found the following subscriptions:${NC}"
        echo "$SUBSCRIPTIONS"
        for subscription in $SUBSCRIPTIONS; do
            execute "gcloud pubsub subscriptions delete '$subscription' --quiet"
        done
    fi

    # 3. Remove IAM service account
    echo -e "\n${YELLOW}Cleaning up IAM service accounts...${NC}"
    execute "gcloud iam service-accounts delete ${SERVICE_ACCOUNT_NAME}@${PROJECT_ID}.iam.gserviceaccount.com --quiet"

    # 4. Remove custom IAM roles
    execute "gcloud iam roles delete buildkite_webhook --project=$PROJECT_ID --quiet || true"

    # 5. Clean up Kubernetes cluster resources if applicable
    # Note: Add specific Kubernetes cleanup here if needed
    # For example:
    # execute "kubectl delete namespace buildkite-webhook"
    # execute "kubectl delete namespace monitoring"

    # 6. Remove any remaining secrets and configurations
    echo -e "\n${YELLOW}Removing additional configurations...${NC}"
    execute "gcloud secrets list --filter=name~'buildkite-' | grep 'name:' | sed 's/name: //' | xargs -I {} gcloud secrets delete {}"

    echo -e "\n${GREEN}Cleanup complete for project $PROJECT_ID${NC}"
}

# Main script execution
main() {
    # Print project details
    echo -e "${YELLOW}Project: $PROJECT_ID${NC}"
    
    # Confirm before proceeding
    confirm

    # Execute cleanup
    cleanup
}

# Run the main function
main
